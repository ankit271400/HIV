
```python
import os
import base64
import json
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from typing import Any, Dict, Union
import logging

logger = logging.getLogger(__name__)

class DataEncryption:
    """Handle encryption and decryption of sensitive data"""
    
    def __init__(self):
        self.key_file = "data/encryption.key"
        self.fernet = self._get_or_create_key()
    
    def _get_or_create_key(self) -> Fernet:
        """Get existing encryption key or create new one"""
        try:
            # Create data directory if it doesn't exist
            os.makedirs("data", exist_ok=True)
            
            if os.path.exists(self.key_file):
                # Load existing key
                with open(self.key_file, 'rb') as key_file:
                    key = key_file.read()
            else:
                # Generate new key
                key = Fernet.generate_key()
                with open(self.key_file, 'wb') as key_file:
                    key_file.write(key)
                
                # Set restrictive permissions
                os.chmod(self.key_file, 0o600)
                logger.info("🔐 New encryption key generated")
            
            return Fernet(key)
            
        except Exception as e:
            logger.error(f"Encryption key error: {e}")
            raise

    def encrypt_data(self, data: Union[Dict[str, Any], str]) -> str:
        """Encrypt data and return base64 encoded string"""
        try:
            if isinstance(data, dict):
                data_str = json.dumps(data)
            else:
                data_str = str(data)
            
            encrypted_data = self.fernet.encrypt(data_str.encode())
            return base64.b64encode(encrypted_data).decode()
            
        except Exception as e:
            logger.error(f"Encryption failed: {e}")
            raise

    def decrypt_data(self, encrypted_data: str) -> Dict[str, Any]:
        """Decrypt base64 encoded data and return dictionary"""
        try:
            encrypted_bytes = base64.b64decode(encrypted_data.encode())
            decrypted_data = self.fernet.decrypt(encrypted_bytes)
            return json.loads(decrypted_data.decode())
            
        except Exception as e:
            logger.error(f"Decryption failed: {e}")
            raise

# Global encryption instance
_encryption_instance = None

def get_encryption_instance() -> DataEncryption:
    """Get global encryption instance (singleton pattern)"""
    global _encryption_instance
    if _encryption_instance is None:
        _encryption_instance = DataEncryption()
    return _encryption_instance

def encrypt_data(data: Union[Dict[str, Any], str]) -> str:
    """Convenience function to encrypt data"""
    return get_encryption_instance().encrypt_data(data)

def decrypt_data(encrypted_data: str) -> Dict[str, Any]:
    """Convenience function to decrypt data"""
    return get_encryption_instance().decrypt_data(encrypted_data)

class SecureSessionManager:
    """Manage secure user sessions with encryption"""
    
    def __init__(self):
        self.encryption = get_encryption_instance()
    
    def create_secure_session(self, session_data: Dict[str, Any]) -> str:
        """Create encrypted session token"""
        try:
            session_data['created_at'] = str(datetime.now())
            session_data['expires_at'] = str(datetime.now() + timedelta(hours=24))
            
            return self.encryption.encrypt_data(session_data)
            
        except Exception as e:
            logger.error(f"Session creation failed: {e}")
            raise
    
    def validate_session(self, session_token: str) -> Dict[str, Any]:
        """Validate and decrypt session token"""
        try:
            session_data = self.encryption.decrypt_data(session_token)
            
            # Check expiration
            expires_at = datetime.fromisoformat(session_data['expires_at'])
            if datetime.now() > expires_at:
                raise ValueError("Session expired")
            
            return session_data
            
        except Exception as e:
            logger.error(f"Session validation failed: {e}")
            raise

def hash_sensitive_data(data: str, salt: bytes = None) -> tuple:
    """Hash sensitive data with salt for secure storage"""
    try:
        if salt is None:
            salt = os.urandom(32)
        
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
        )
        
        hashed_data = kdf.derive(data.encode())
        return base64.b64encode(hashed_data).decode(), base64.b64encode(salt).decode()
        
    except Exception as e:
        logger.error(f"Hashing failed: {e}")
        raise

def verify_hashed_data(data: str, hashed_data: str, salt: str) -> bool:
    """Verify data against its hash"""
    try:
        salt_bytes = base64.b64decode(salt.encode())
        expected_hash, _ = hash_sensitive_data(data, salt_bytes)
        return expected_hash == hashed_data
        
    except Exception as e:
        logger.error(f"Hash verification failed: {e}")
        return False
```
